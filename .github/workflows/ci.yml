name: CI/CD - Build, Push, and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'backend/**'
    tags:
      - '*' # Trigger on any tag creation
  pull_request:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'backend/**'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Run Backend Tests
        working-directory: ./backend
        run: npm test

  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run Frontend Tests
        working-directory: ./frontend
        run: npm test

  build-and-push-images:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub (on tag only)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Backend QA image (on pull request)
        if: github.event_name == 'pull_request'
        working-directory: ./backend
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/qa-backend:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/qa-backend:latest

      - name: Build and push Frontend QA image (on pull request)
        if: github.event_name == 'pull_request'
        working-directory: ./frontend
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/qa-frontend:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/qa-frontend:latest

      - name: Build and push Backend Production image (on tag)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        working-directory: ./backend
        run: |
          TAG_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/tags\///')
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/prd-backend:$TAG_NAME .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/prd-backend:$TAG_NAME

      - name: Build and push Frontend Production image (on tag)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        working-directory: ./frontend
        run: |
          TAG_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/tags\///')
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/prd-frontend:$TAG_NAME .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/prd-frontend:$TAG_NAME

          deploy-qa:
            runs-on: ubuntu-latest
            needs: build-and-push-images
            if: github.event_name == 'pull_request'
            steps:
              - name: Checkout code
                uses: actions/checkout@v3
        
              - name: Azure Login
                uses: azure/login@v1
                with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}
        
              - name: Create or Update Azure Resources (QA)
                run: |
                  # Create Resource Group (if it doesn't exist)
                  az group create --name "sdproject" --location "eastus" --output json --query properties.provisioningState -o tsv | grep -q Succeeded || exit 1
        
                  # Create Container Apps Environment (if it doesn't exist)
                  az containerapp env create --name "sdproject-env" --resource-group "sdproject" --location "eastus" --output json --query properties.provisioningState -o tsv | grep -q Succeeded || exit 1
        
                  # Create or Update Container App (QA Backend)
                  az containerapp create --name "sdproject-app-qa-backend" --resource-group "sdproject" --environment "sdproject-env" --image "${{ secrets.DOCKER_HUB_USERNAME }}/qa-sdproject-backend:latest" --registry-server "index.docker.io" --registry-username "${{ secrets.DOCKER_HUB_USERNAME }}" --registry-password "${{ secrets.DOCKER_HUB_TOKEN }}" --ingress 'external' --target-port 5000 --min-replicas 1 --output json --query properties.provisioningState -o tsv | grep -q Succeeded || \
                  az containerapp update --name "sdproject-app-qa-backend" --resource-group "sdproject" --image "${{ secrets.DOCKER_HUB_USERNAME }}/qa-sdproject-backend:latest" --output json --query properties.provisioningState -o tsv | grep -q Succeeded || exit 1
        
                  # Create or Update Container App (QA Frontend)
                  az containerapp create --name "sdproject-app-qa-frontend" --resource-group "sdproject" --environment "sdproject-env" --image "${{ secrets.DOCKER_HUB_USERNAME }}/qa-sdproject-frontend:latest" --registry-server "index.docker.io" --registry-username "${{ secrets.DOCKER_HUB_USERNAME }}" --registry-password "${{ secrets.DOCKER_HUB_TOKEN }}" --ingress 'external' --target-port 80 --min-replicas 1 --output json --query properties.provisioningState -o tsv | grep -q Succeeded || \
                  az containerapp update --name "sdproject-app-qa-frontend" --resource-group "sdproject" --image "${{ secrets.DOCKER_HUB_USERNAME }}/qa-sdproject-frontend:latest" --output json --query properties.provisioningState -o tsv | grep -q Succeeded || exit 1
        
          deploy-prod:
            runs-on: ubuntu-latest
            needs: build-and-push-images
            if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
            steps:
              - name: Checkout code
                uses: actions/checkout@v3
        
              - name: Azure Login
                uses: azure/login@v1
                with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}
        
              - name: Create or Update Azure Resources (Prod)
                run: |
                  # Create Resource Group (if it doesn't exist)
                  az group create --name "sdproject" --location "eastus" --output json --query properties.provisioningState -o tsv | grep -q Succeeded || exit 1
        
                  # Create Container Apps Environment (if it doesn't exist)
                  az containerapp env create --name "sdproject-env" --resource-group "sdproject" --location "eastus" --output json --query properties.provisioningState -o tsv | grep -q Succeeded || exit 1
        
                  # Create or Update Container App (Prod Backend)
                  az containerapp create --name "sdproject-app-prod-backend" --resource-group "sdproject" --environment "sdproject-env" --image "${{ secrets.DOCKER_HUB_USERNAME }}/prd-sdproject-backend:$TAG_NAME" --registry-server "index.docker.io" --registry-username "${{ secrets.DOCKER_HUB_USERNAME }}" --registry-password "${{ secrets.DOCKER_HUB_TOKEN }}" --ingress 'external' --target-port 5000 --min-replicas 1 --output json --query properties.provisioningState -o tsv | grep -q Succeeded || \
                  az containerapp update --name "sdproject-app-prod-backend" --resource-group "sdproject" --image "${{ secrets.DOCKER_HUB_USERNAME }}/prd-backend:$TAG_NAME" --output json --query properties.provisioningState -o tsv | grep -q Succeeded || exit 1
        
                  # Create or Update Container App (Prod Frontend)
                  az containerapp create --name "sdproject-app-prod-frontend" --resource-group "sdproject" --environment "sdproject-env" --image "${{ secrets.DOCKER_HUB_USERNAME }}/prd-frontend:$TAG_NAME" --registry-server "index.docker.io" --registry-username "${{ secrets.DOCKER_HUB_USERNAME }}" --registry-password "${{ secrets.DOCKER_HUB_TOKEN }}" --ingress 'external' --target-port 80 --min-replicas 1 --output json --query properties.provisioningState -o tsv | grep -q Succeeded || \
                  az containerapp update --name "sdproject-app-prod-frontend" --resource-group "sdproject" --image "${{ secrets.DOCKER_HUB_USERNAME }}/prd-frontend:$TAG_NAME" --output json --query properties.provisioningState -o tsv | grep -q Succeeded || exit 1
